---------------------------------------------------------------------------------------------------------------------------------------------
TODO list
---------------------------------------------------------------------------------------------------------------------------------------------
-Release v0.5.2:
    1. Continuous genotypes/phenotypes:
           - Still read the phenotype as a string, to deal with NAs.
           - If not NA, convert to float, and store as a float in the strain object.
           - Replace the part where we test whether both "0" and "1" phenotypes are present by a test that the empirical variance of the phenotypes is above some threshold (or simply that they are not all identical).
           - Optionally build the pheno0Count and pheno1Count counters (which we use for visualization) using a user specified threshold: eg, users can say that positive phenotypes are class1 and non-negative ones are class 0. We provide a default threshold (eg >0 vs <=0, which works seamlessly for the current binary phenotypes) and an option to just desactivate the count columns in the visualization.
           Regarding the figures:
               - The barplot and manhattan plot for PCs can be done with non-binary phenotypes.
               - The "indiv vs first PCs" and tree plot would need to be adapted eg by replacing the 2 colors by a gradient of shades. I can try and do it (or we can just skip these plots for non-binary phenotypes for the moment).
    2. Step1 only + count matrix X
        -Possibility to launch only step1:
            - Thus, user can specify their own processing on the X matrix of unitigs + Possibility to write a count matrix at step1, as we get this count value during step1.3.  (Work on unitig counts rather than presence/absence)
                 -  Add to DBGWAS parameter -runOnlyStep1 Freq/Bin
                          -It will just produces the variant matrices and stop
                          -Freq = use frequences
                          -Bin = use presence/absence pattern
                - Required: do the filtering of patterns with maf < maf.filter in C++ (for now done in R)
    3. Two SFF filters (top-N + q-value). The one leading to the lowest number of patterns is used.
        -Double-check SFF filter
                -When the 100th q-value is really not significant (like ~1), there is no meaning to generate a subgraph with the related unitigs.
                The double check would be: take the top 100 q-values below a threshold (like the usual 0.05). Do you think we could try this ?
                This would certainly lead to 2 different SFF parameters, which are somewhere correlated...


Core GWAS  functionalities (HIGH PRIORITY):
    -Assemble the heaviest path of the DBG and blast it (or the path going through the largest number of significant unitigs) /// Multiple alignment on the node sequences that are selected?
        -That’s more or less what we are trying to do in automatic_labelling branch...
    -Work on raw reads instead of assembled contigs (@see https://mail.google.com/mail/u/0/#inbox/15ffcd92a248a692)
    -Add covariates (e.g. patient metadata) in the association model




Performances (and I/O features):
    === HIGH PRIORITY ===
    -Navigation in the web pages:
        -Work on the javascript performance:   In very large graphs, selecting all nodes, unselecting, etc is very slow
        -In index pages with a lot of annotation, it is way too hard to use a drop-down list: Change filter in the annotation list in the summary page (add option for the user to use text or to type something)
    -Do a text output of DBGWAS so users can use other tools to post-process its output
    -Make step 3 multithreaded
    -"make" should copy the DBGWAS_lib folder to the tools/ folder

    === LOW PRIORITY ===
    -When launching only step3, there should be no need to specify a strain file
    -Treat NA phenotypes better:  we just removed from the input for now
    -Memory optimization:
        -Change UnitigIdStrandPos simply to unitigId (We just use the unitig id...)
    -Use a portable version of R to remove all dependencies?
    -Allow the user to provide an already built database, instead of calling makeblastdb always
    -Adding metadata to features (like what each genome mean, species, etc)
        -This would be a field in the input file with a column with whatever the user would like to put




Web navigation functionalities (LOW PRIORITY)
    -Possibility to export graph view as bitmap…
    -Possibility to export linear paths as patterns of sequences
    -Possibility to map a particular sequence on the output subgraphs (highlight its path). This is a little bit different from the mapping of a complete input individual sequence. Here, the idea would be to “visualize” on the graph a particular gene variant. Indeed, a lot of resistance genes are gene family containing well described and well annotated variant. For instance, when we see than 44 nodes got the “TEM-11” annotation, the idea would be to draw the (real exact) path of TEM-11 sequence on the graph…
    -Select nodes using the newick tree
        -This is used to select nodes belonging to a strain
        -The newick tree should have only the strains that contains an unitig in the component
        -It should also show the strain path in the graph
    -Show the newick tree and the unitigs (genotypes) @see: https://mail.google.com/mail/u/0/#sent/15f1663316ff5dec
    -Transparency switch
        Non-significant nodes lose transparency
    -Show the original genomes as paths in the graph?
    -If no annotation was provided, remove the line “Annotations on significant nodes: No annotations found.” from the tables in the summary page
    -Fix qvalue default min and max to min and max of the components
