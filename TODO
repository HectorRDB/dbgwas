High priority TODO:
  -Add LBBE and biomerieux names (or logos) to the webpages (result pages + mention on gitlab ?)
  -nb-cores defaults to 1
  -Fix the error message when the parameters are not correct
    -We show the error 3 times, instead of 1
  -When the strains input file is missing, we return an error:
      [FATAL ERROR] Error opening file
      Could it be a little more detailed? Eg, which file (there are two inputs), and whether the format is wrong or the file was not found.
  -What to do for the publication?
  -Is there any graph produced by the statistical part that would be relevant to show also in the visualisation?
  -reimplement the -nt_db and -pt_db parameters
    -change to just -annot_db parameter
    -list a files ordered by priority
        -Primary is the first and so on
    -each one has a color
    -they can be either nt or pt, and we guess from the sequences what it is
    -e.g.: -annot_db db1.fasta,db2.fasta,db3.fasta,etc...
  -Make the step 3 multi-threaded
    -When the databases are large (e.g. uniprot), it takes a lot of time to blast it... Making it multi-threaded will make things a lot faster...
  -In the index page, order the annotation of the significant nodes by blast score and show the blast score;
  -Allow the user to provide an already built database, instead of calling makeblastdb always
  -Fix qvalue default min and max to min and max of the components
  -newick file should be optional (R script and software)
  -remove the patterns with maf < maf.filter in C++
    -ok for now (done in R)
  -treat NA better
    -We just removed from the input for now
  -svd and pca steps are probably redundant in cdbg_lin_loc as XX is centered. Check that they produce the same set of eigenvectors and remove the pca steps (call to prcomp uses more memory than svd).
    -check with laurent
  -fix output folder from being fixed to being a parameter
      -Need a fix on Gemma/Bugwas output folder first



Low priority TODO:
  -Hovering a node should highlight it in the table if it is in the table
  -Multiple alignment on the node sequences that are selected?
    -Maybe this allow us to run the MSA:
        -https://en.wikipedia.org/wiki/Asm.js
        -https://en.wikipedia.org/wiki/Emscripten
        -https://en.wikipedia.org/wiki/Google_Native_Client
    -To view the MSA, there are several JS plugins
        -http://msa.biojs.net/
    -Or do we need to implement MSA ourselves in javascript or run a local web server which will provide a way of calling a proper program to do this
  -Transparency switch
    -Non-significant nodes lose transparency
  -Assemble the heaviest path of the DBG and blast it (or the path going through the largest number of significant unitigs)
    -I think we will need a good amount of effort here, and I do not know if it is an essential feature... To discuss...
  -Save the blast results on some file?
  -Adding metadata to features (like what each genome mean, species, etc)
    -This would be a field in the input file with a collumn with whatever the user would like to put
    -Show the original genomes as paths in the graph?
  - possibility to work on unitig counts rather than presence/absence




Done v 0.3.2:
  -Changed the layout of the graph page - now we have 3 panels, where the south and east panel are resizable and closable
  -Removed ratio from the legend
  -Reduced size of high allelle frequency
  -Reduced the width of the tables in the index page





Done v 0.3.1:
-The annotations in the graph pages are now sorted in decreasing order by the number of nodes it maps to in the graph
  -The number of nodes is also displayed in parenthesis before the annotation
-Fix very wide selects in the index page (put a horizontal scroll)
  -Increased the height of select as well
-Selecting a gene now only centers the screen on the nodes of that gene, without zooming



Done v 0.3.0:
Changelog
-Core:
  -Protein and nucleotide annotations are now supported;
  -Users are now allowed to input their own annotation database
    -They can further define two TAGs in their fasta headers:
            -DBGWAS_index_tag=<value>;
            -DBGWAS_graph_tag=<value>;
        Which is what is going to be shown on the index and graph pages. If these tags are not found in the header, then the full header is considered
        If the tags are available, but empty, a value of EMPTY is set;
  -Blast output is now saved in tmp folder for each component;
  -The annotation process is optional;
  -Spaces in FASTA headers of the annotations DB are replaced for underscore because BLAST just considers the headers up to the first space
    -A copy of the DB is made, and the spaces are replaced in this copy, in order to do not modify the users' annotations
  -Blast executables are now integrated in the tool


-Index page:
  -Annotations only for the significant nodes are shown in the index page
  -Fixed a bug when no condition is set on the filter in the index page
  -The arguments used to create the visualisation are now in the index page
  -Fixed some icons on the index page related to the filter
  -Fix the annotation filtering problems in the index page (i.e. one annotation substring of the other)
  -Added expand/collapse buttons for the parameters and filters on the index page


-Graph page:
    -When a gene/tag is selected in the graph page, the screen in centered on these nodes
    -Annotation and sequence columns now has a limit on the number of characters that can be displayed with a modal to show the rest of the sequence







Misc:
Installing zlib (only for compiling):
   sudo apt-get install libgcrypt11-dev zlib1g-dev
