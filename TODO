---------------------------------------------------------------------------------------------------------------------------------------------
Prioritaire
---------------------------------------------------------------------------------------------------------------------------------------------
Paper TODO:
v0.4.8:
-Test:
-Run with the new DBs and check:
-DBGWAS_index_tag renamed to DBGWAS_general_tag;
-DBGWAS_graph_tag renamed to DBGWAS_specific_tag;
    -Update example and images in the readme
    -Check README and check if everything is fine
-DBGWAS now processes all tags in the format "DBGWAS_xyz_tag = <value>;" tag
    -All headers like this are processed and a xyz column is added to the annotation table in the graph page;
    -DBGWAS_general_tag and DBGWAS_specific_tag are the exceptions to this rule;
    -Compare with previous version and check if everything is fine

-Update Memory and CPU requirements section in the README
    -Rerun with 8 cores

-Paper
    -Update dbgwas.pdf (section 2 Methods)
    -Update supplMaterials.pdf (section 4 Supplementary Methods, Part II)
    -@see https://mail.google.com/mail/u/0/#inbox/15f9c647ececdc5e?compose=15fb5578f7bd95f7




















---------------------------------------------------------------------------------------------------------------------------------------------
TODO list
---------------------------------------------------------------------------------------------------------------------------------------------
High priority TODO:
    -Receive as input reads instead of contigs
    -treat NA better
        -We just removed from the input for now
    -Large kmer size bug:
        -Even if we set in CMakeLists.txt:
            set (KSIZE_LIST "32   64   96  128  160  192  224  256")
        -We still can't run the tool with a large kmer size due to:
            leandro@ngs-provisoire:/data2/leandro/GWAS/DBGWAS-0.4.8-Linux-precompiled/bin$ ./DBGWAS -strains pseudomonas_aeruginosa_full_dataset/strains -newick pseudomonas_aeruginosa_full_dataset/strains.newick -nc_db Resistance_DB_for_DBGWAS.fasta -pt_db uniprot_sprot_bacteria_for_DBGWAS.with_extra_tags.fasta -nb-cores 4 -k 165 -output output_test_k_165
            Step 1. Building DBG and mapping strains on the DBG...
            [WARNING] Skipping strain WH-SGI-V-07286 because its phenotype is NA
            [WARNING] Skipping strain WH-SGI-V-07290 because its phenotype is NA
            [DSK: nb solid kmers found : 140764976   ]  100  %   elapsed:  12 min 3  sec   remaining:   0 min 0  sec   cpu: 153.4 %   mem: [ 924, 4598, 4598] MB
            [Building BooPHF]  99.8 %   elapsed:   0 min 57 sec   remaining:   0 min 0  sec
            [MPHF: populate                          ]  100  %   elapsed:   1 min 22 sec   remaining:   0 min 0  sec   cpu:  99.9 %   mem: [ 924,  924, 4598] MB
            EXCEPTION: kmer size 165 too big for cascading bloom filters
        -The maximum k-mer size we can use is 128
        -I am setting in CMakeLists.txt back to:
            set (KSIZE_LIST "32   64   96  128")

    -Fix copy and paste of cells containing annotation;
        -Asked on stack overflow
    -Fix cytoscape export button regarding annotation table
        -Asked on stack overflow




Low priority TODO:
    -Select nodes using the newick tree
        -This is used to select nodes belonging to a strain
        -The newick tree should have only the strains that contains an unitig in the component
        -It should also show the strain path in the graph
    -Show the newick tree and the unitigs (genotypes)
        -@see: https://mail.google.com/mail/u/0/#sent/15f1663316ff5dec
  -Move to the latest version of GATB
  -Use a portable version of R to remove all dependencies?
  -Allow the user to provide an already built database, instead of calling makeblastdb always
  -Fix qvalue default min and max to min and max of the components
  -Use a continuous or categorical phenotype instead of a binarized phenotype (apparently, this would be more suited for virulence phenotypes);
  -Use counts instead of pres/abs patterns for the genotypes (and one application would be to compute such analysis on transcriptome data);
  -Add covariates (e.g. patient metadata) in the association model;
  -If no annotation was provided, remove the line:
        Annotations on significant nodes:
        No annotations found.
    from the tables in the summary page
  -remove the patterns with maf < maf.filter in C++
    -ok for now (done in R)
  -Multiple alignment on the node sequences that are selected?
    -Maybe this allow us to run the MSA:
        -https://en.wikipedia.org/wiki/Asm.js
        -https://en.wikipedia.org/wiki/Emscripten
        -https://en.wikipedia.org/wiki/Google_Native_Client
    -To view the MSA, there are several JS plugins
        -http://msa.biojs.net/
    -Or do we need to implement MSA ourselves in javascript or run a local web server which will provide a way of calling a proper program to do this
  -Make the step 3 fully multi-threaded
  -Transparency switch
    -Non-significant nodes lose transparency
  -Assemble the heaviest path of the DBG and blast it (or the path going through the largest number of significant unitigs)
    -I think we will need a good amount of effort here, and I do not know if it is an essential feature... To discuss...
  -Adding metadata to features (like what each genome mean, species, etc)
    -This would be a field in the input file with a collumn with whatever the user would like to put
    -Show the original genomes as paths in the graph?
  -Work on unitig counts rather than presence/absence

