Done:
-Index page:
  -Show the annotation only for the significant nodes in the index page
  -Fixed a bug when no condition is set on the filter in the index page
  -The arguments used to create the visualisation are now in the index page
  -Fixed some icons on the index page related to the filter
  -Fix the annotation filtering problems in the index page (i.e. one annotation substring of the other)
  -Added expand/collapse buttons for the parameters and filters on the index page


-Graph page:
    -Center the screen on the highlighted nodes of a gene
        -TODO: test
    -Annotation and sequence columns now has a limit on the number of characters that can be displayed with a modal to show the rest of the sequence
        -TODO: test

-Core:
  -Integrate blast executables in the app
    TODO: test blastx
    -Magali uniprot db will allow us to test blastx and the spaces
  -Allow users to input their own annotation database (Christine's example)
    -The problem is the standardization on FASTA headers... I guess if we do this, we should not force the users to standardize it
        -We can define two TAGs on the fasta header:
            -DBGWAS_index_tag=<value>;
            -DBGWAS_graph_tag=<value>;
        which is what is going to be shown on the index and graph pages. If these tags are not found in the header, then we just set both values to the full header.
        This way people can provide their own database, and they customize it or not...
    -If the tags are not available, the full header is taken as the tags;
    -If the tags are available, but empty, a value of EMPTY is set;
    -TODO: test
  -Make the annotation process optional
    -TODO: test
  -Blast output is now saved in tmp folder for each component (nice for debugging)
    -TODO: test




High priority TODO:
  -Is there any graph produced by the statistical part that would be relevant to show also in the visualisation?
  -In the index page, order the annotation of the significant nodes by blast score and show the blast score;
  -Allow the user to provide an already built database, instead of calling makeblastdb always
  -Replace spaces in FASTA headers because BLAST just considers the headers up to the first space
    -Make a copy of the file, and replace this in the copy, in order to do not modify the users' annotation
  -Fix qvalue default min and max to min and max of the components
  -When the strains input file is missing, we return an error:
      [FATAL ERROR] Error opening file
      Could it be a little more detailed? Eg, which file (there are two inputs), and whether the format is wrong or the file was not found.
  -Fix the error message when the parameters are not correct
    -We show the error 3 times, instead of 1



  -newick file should be optional (R script and software)
  -remove the patterns with maf < maf.filter in C++
    -ok for now (done in R)
  -treat NA better
    -We just removed from the input for now
  -svd and pca steps are probably redundant in cdbg_lin_loc as XX is centered. Check that they produce the same set of eigenvectors and remove the pca steps (call to prcomp uses more memory than svd).
    -check with laurent
  -fix output folder from being fixed to being a parameter
      -Need a fix on Gemma/Bugwas output folder first



Low priority TODO:
  -Multiple alignment on the node sequences that are selected?
    -http://msa.biojs.net/
    -There are several JS plugins to *show* the multiple alignment, but none to do it
        -If we want, we will either need to implement it ourselves in javascript or run a local web server which will provide a way of calling a proper program to do this
  -Transparency switch
    -Non-significant nodes lose transparency
  -Detach the table to a larger view (it can help people if it is too small)
    -It hardly is too small I think
  -Assemble the heaviest path of the DBG and blast it (or the path going through the largest number of significant unitigs)
    -I think we will need a good amount of effort here, and I do not know if it is an essential feature... To discuss...
  -Save the blast results on some file?
  -Adding metadata to features (like what each genome mean, species, etc)
    -This would be a field in the input file with a collumn with whatever the user would like to put
    -Show the original genomes as paths in the graph?
  - possibility to work on unitig counts rather than presence/absence







Misc:
Installing zlib (only for compiling):
   sudo apt-get install libgcrypt11-dev zlib1g-dev
