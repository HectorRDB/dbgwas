Done:
  -Integrate blast executables in the app
    TODO: test blastx
  -Allow users to input their own annotation database (Christine's example)
    -The problem is the standardization on FASTA headers... I guess if we do this, we should not force the users to standardize it
        -We can define two TAGs on the fasta header:
            -DBGWAS_index_tag=<value>;
            -DBGWAS_graph_tag=<value>;
        which is what is going to be shown on the index and graph pages. If these tags are not found in the header, then we just set both values to the full header.
        This way people can provide their own database, and they customize it or not...
    -TODO: test
  -Make the annotation process optional
    -TODO: test
  -Show the annotation only for the significant nodes in the index page
    -TODO: test
  -Fix the annotation filtering problems (i.e. one annotation substring of the other)
    -TODO: test
  -Blast output is now saved in tmp folder for each component (nice for debugging)
    -TODO: test





High priority TODO:
  -Center the screen on the highlighted nodes of a gene

  -Arrumar icones do filter

  -In the index page, order the annotation of the significant nodes by blast score and show the blast score;

  -Allow the user to provide an already built database, instead of calling makeblastdb always

  -Replace spaces in FASTA headers because BLAST just considers the headers up to the first space
    -Make a copy of the file, and replace this in the copy, in order to do not modify the users' annotation

  -Annotation and sequence columns should be smaller, but scrollable

  -Fix qvalue default min and max to min and max of the components

  -Fix the error we get when the filter has no rules in the index page

  -Write the nb of significant patterns and significant unitigs in the index page
    -Job title
    -Nb of strains
    -Maybe just show all the arguments of the execution

  -newick file should be optional (R script and software)
  -remove the patterns with maf < maf.filter in C++
    -ok for now (done in R)
  -treat NA better
    -We just removed from the input for now
  -svd and pca steps are probably redundant in cdbg_lin_loc as XX is centered. Check that they produce the same set of eigenvectors and remove the pca steps (call to prcomp uses more memory than svd).
    -check with laurent
  -fix output folder from being fixed to being a parameter
      -Need a fix on Gemma/Bugwas output folder first



Low priority TODO:
  -Multiple alignment on the node sequences that are selected?
    http://msa.biojs.net/
    -There are several JS plugins to show the multiple alignment, but none to do it
        -If we want, we will either need to implement ourselves or run a local web server that does this calling a program to do it
  -Transparency switch
  -Assemble the heaviest path of the DBG and blast it (or the path going through the largest number of significant unitigs)
  -Save the blast results on some file?
  -Adding metadata to features (like what each genome mean, species, etc)
    -Show the original genomes as paths in the graph?
  - When the strains input file is missing, we return an error:
      [FATAL ERROR] Error opening file
      Could it be a little more detailed? Eg, which file (there are two inputs), and whether the format is wrong or the file was not found.
  - possibility to work on unitig counts rather than presence/absence
  - memory bottleneck right now when do.lineage=TRUE is in computing the correlations between all PCs and variants. Could be improved but not trivial. Second bottleneck is in computing SVD.









Misc:
Installing zlib (only for compiling):
   sudo apt-get install libgcrypt11-dev zlib1g-dev
